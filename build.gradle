buildscript {
    repositories {
        mavenCentral()
        repositories {
            maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }
        }
    }
    dependencies {
        // qulice doesn't generate gradle task
        // classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9"
    }
}


plugins {
    id "org.jetbrains.intellij" version "1.5.3"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
    }
}

wrapper {
    doLast {
        println "WRAPPER"
    }
    gradleVersion = '7.4.2'
}

group 'antlr'
version pluginVersion

apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'antlr'
apply plugin: 'jacoco'


task getGrammar {
    doFirst {
        def f = new File('src/main/antlr/org/jetbrains/eolang/parser/EO.g4')
        if (!f.exists())
            println("Created destination file: src/main/antlr/org/jetbrains/eolang/parser/EO.g4")
        else {
            println("File already exists. Delete it and rerun task")
            return
        }
        println("Creating and downloading grammar file from " +
                "https://raw.githubusercontent.com/objectionary/" +
                "eo/master/eo-parser/src/main/antlr4/org/eolang/parser/Program.g4")

        new URL('https://raw.githubusercontent.com/objectionary/eo/master/eo-parser/src/main/antlr4/org/eolang/parser/Program.g4').
                withInputStream { i -> f.withOutputStream { it << i } }
        f.append('\n\nBAD_CHARACTER\n' +
                '\t:\t.\t-> channel(HIDDEN)\n' +
                '\t;')
        if (f.exists())
            println("Grammar downloading is completed")

        ant.replaceregexp(match: 'Program', replace: 'EO', flags: 'g', byline: true) {
            fileset(dir: 'src/main/antlr/org/jetbrains/eolang/parser', includes: 'EO.g4')
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    doLast {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/report.xml")
        subprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            xml.destination file("**/build/jacoco/report.xml")   // doesn't move reports here after test
            // xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled false
            csv.enabled false
        }
    }
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileTestJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

intellij {
    version = ideaVersion
    pluginName = 'eo-intellij'
    downloadSources = false
    updateSinceUntilBuild = false
}


publishPlugin {
    dependsOn(test)
    token = System.getenv('MARKETPLACE_TOKEN')
}

generateGrammarSource {
    dependsOn(getGrammar)
    outputDirectory = new File("src/main/java/org/eolang/jetbrains/parser".toString())
    arguments += ["-package", "org.eolang.jetbrains.parser", "-Xexact-output-dir"]
}
verifyPlugin {
}

repositories {
    mavenCentral()
}

dependencies {
    antlr("org.antlr:antlr4:$antlr4Version") {
        exclude group:'com.ibm.icu', module:'icu4j'
    }
    implementation 'org.antlr:antlr4-intellij-adaptor:0.1'
    // implementation "com.qulice:qulice-gradle-plugin:0.18.19"
    testImplementation group: 'junit', name: 'junit', version: '4.11'
}


sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9
